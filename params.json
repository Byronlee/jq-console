{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"#JQConsole  \r\n  \r\nA jQuery terminal plugin written in CoffeeScript.  \r\n  \r\nThis project was spawned because of our need for a simple web terminal plugin   \r\nfor the <a href=\"http://repl.it\">repl.it</a> project. It tries to simulate a low level terminal by providing (almost)  \r\nraw input/output streams as well as input and output states.  \r\n  \r\nVersion 2.0 adds baked-in support for rich multi-line prompting and operation  \r\nqueueing.  \r\n  \r\nNOTE: This info is for jq-console v2.0. For jq-console v1.0 see README-v1.md.  \r\n  \r\n  \r\n##Tested Browsers  \r\n  \r\nThe plugin has been tested on the following browsers:  \r\n  \r\n* IE 9-10\r\n* Chrome 10-14\r\n* Firefox 3.6-6\r\n* Opera 11  \r\n  \r\n  \r\n##Getting Started  \r\n  \r\n###Echo example\r\n\r\n```css\r\n    /* The console container element */\r\n    #console {\r\n      position: absolute;\r\n      width: 400px;\r\n      height: 500px;\r\n      background-color:black;\r\n    }\r\n    /* The inner console element. */\r\n    .jqconsole {\r\n        padding: 10px;\r\n    }\r\n    /* The cursor. */\r\n    .jqconsole-cursor {\r\n        background-color: gray;\r\n    }\r\n    /* The cursor color when the console looses focus. */\r\n    .jqconsole-blurred .jqconsole-cursor {\r\n        background-color: #666;\r\n    }\r\n    /* The current prompt text color */\r\n    .jqconsole-prompt {\r\n        color: #0d0;\r\n    }\r\n    /* The command history */\r\n    .jqconsole-old-prompt {\r\n        color: #0b0;\r\n        font-weight: normal;\r\n    }\r\n    /* The text color when in input mode. */\r\n    .jqconsole-input {\r\n        color: #dd0;\r\n    }\r\n    /* Previously entered input. */\r\n    .jqconsole-old-input {\r\n        color: #bb0;\r\n        font-weight: normal;\r\n    }\r\n    /* The text color of the output. */\r\n    .jqconsole-output {\r\n        color: white;\r\n    }\r\n```\r\n\r\n```html\r\n    <div id=\"console\"></div>\r\n    <script src=\"jquery.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n    <script src=\"jqconsole.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n    <script>\r\n      $(function () {\r\n        var jqconsole = $('#console').jqconsole('Hi\\n', '>>>');\r\n        var startPrompt = function () {\r\n          // Start the prompt with history enabled.\r\n          jqconsole.Prompt(true, function (input) {\r\n            // Output input with the class jqconsole-output.\r\n            jqconsole.Write(input + '\\n', 'jqconsole-output');\r\n            // Restart the prompt.\r\n            startPrompt();\r\n          });\r\n        };\r\n        startPrompt();\r\n      });\r\n    </script>\r\n```\r\n<iframe src=\"demo/echo.html\" style=\"width:400px;height:500px\">\r\n</iframe>\r\n  \r\n###Instantiating  \r\n\r\n```javascript\r\n    $(div).jqconsole(welcomeString, promptLabel, continueLabel);\r\n```\r\n\r\n* `div` is the div element or selector. Note that this element must be\r\n  explicity sized and positioned `absolute` or `relative`.\r\n* `welcomeString` is the string to be shown when the terminal is first rendered.  \r\n* `promptLabel` is the label to be shown before the input when using Prompt().  \r\n* `continueLabel` is the label to be shown before the continued lines of the  \r\n  input when using Prompt().\r\n\r\n##Configuration  \r\n  \r\nThere isn't much initial configuration needed, because the user must supply  \r\noptions and callbacks with each state change. There are a few config methods  \r\nprovided to create custom shortcuts and change indentation width:  \r\n  \r\n###jqconsole.RegisterShortcut\r\nRegisters a callback for a keyboard shortcut.\r\nTakes two arguments:  \r\n\r\n  * __(int|string)__ *keyCode*: The code of the key pressing which (when Ctrl is  \r\n    held) will trigger this shortcut. If a string is provided, the ASCII code  \r\n    of the first character is taken.  \r\n\r\n  * __function__ *callback*: A function called when the shortcut is pressed;  \r\n    \"this\" will point to the JQConsole object.  \r\n\r\n\r\n  Example:  \r\n\r\n        // Ctrl+R: resets the console.  \r\n        jqconsole.RegisterShortcut('R', function() {\r\n          this.Reset();  \r\n        });  \r\n\r\n###jqconsole.SetIndentWidth\r\nSets the number of spaces inserted when indenting and removed when unindenting.  \r\nTakes one argument:  \r\n  \r\n  * __int__ *width*: The code of the key pressing which (when Ctrl is held) will  \r\n    trigger this shortcut.  \r\n\r\n\r\n  Example:  \r\n\r\n        // Sets the indent width to 4 spaces.  \r\n        jqconsole.SetIndentWidth(4);  \r\n\r\n###jqconsole.RegisterMatching \r\nRegisters an opening and closing characters to match and wraps each of the  \r\nopening and closing characters with a span with the specified class.  \r\nTakes one parameters:  \r\n\r\n  * __char__ *open*: The opening character of a \"block\".  \r\n  * __char__ *close*: The closing character of a \"block\".  \r\n  * __string__ *class*: The css class that is applied to the matched characters.  \r\n\r\n\r\n  Example:  \r\n\r\n        jqconsole.RegisterMatching('{', '}', 'brackets');\r\n  \r\n##Usage  \r\n  \r\nUnlike most terminal plugins, jq-console gives you complete low-level control  \r\nover the execution; you have to call the appropriate methods to start input  \r\nor output:  \r\n  \r\n###jqconsole.Input: \r\nAsks user for input. If another input or prompt operation is currently underway,  \r\nthe new input operation is enqueued and will be called when the current  \r\noperation and all previously enqueued operations finish. Takes one argument:  \r\n\r\n  * __function__ *input_callback*: A function called with the user's input when  \r\n    the user presses Enter and the input operation is complete.  \r\n\r\n\r\n  Example:  \r\n\r\n        // Echo the input.  \r\n        jqconsole.Input(function(input) {  \r\n          jqconsole.Write(input);  \r\n        });  \r\n\r\n\r\n###jqconsole.Prompt\r\nAsks user for input. If another input or prompt operation is currently underway  \r\nthe new prompt operation is enqueued and will be called when the current  \r\nperation and all previously enqueued operations finish. Takes three arguments:  \r\n\r\n  * __bool__ *history_enabled*: Whether this input should use history. If true,  \r\n    the user can select the input from history, and their input will also be  \r\n    added as a new history item.  \r\n\r\n  * __function__ *result_callback*: A function called with the user's input when  \r\n    the user presses Enter and the prompt operation is complete.  \r\n\r\n  * __function__ *multiline_callback*: If specified, this function is called when  \r\n    the user presses Enter to check whether the input should continue to the  \r\n    next line. The function must return one of the following values:  \r\n\r\n      * `false`: the input operation is completed.  \r\n\r\n      * `0`: the input continues to the next line with the current indent.  \r\n\r\n      * `N` (int): the input continues to the next line, and the current  \r\n        indent is adjusted by `N`, e.g. `-2` to unindent two levels.  \r\n\r\n    \r\n  * __bool__ *async_multiline*: Whether the multiline callback function should  \r\n    be treated as an asynchronous operation and be passed a continuation  \r\n    function that should be called with one of the return values mentioned  \r\n    above: `false`/`0`/`N`.  \r\n\r\n\r\n  Example:  \r\n\r\n        jqconsole.Prompt(true, function(input) {  \r\n          // Alert the user with the command.  \r\n          alert(input);  \r\n        }, function (input) {  \r\n          // Continue if the last character is a backslash.  \r\n          return /\\\\$/.test(input);  \r\n        });  \r\n  \r\n###jqconsole.AbortPrompt \r\nAborts the current prompt operation and returns to output mode or the next  \r\nqueued input/prompt operation. Takes no arguments.  \r\n\r\n  Example:  \r\n\r\n        jqconsole.Prompt(true, function(input) {  \r\n          alert(input);  \r\n        });  \r\n        // Give the user 2 seconds to enter the command.  \r\n        setTimeout(function() {  \r\n          jqconsole.AbortPrompt();  \r\n        }, 2000);  \r\n\r\n###jqconsole.Write\r\nWrites the given text to the console in a `<span>`, with an   \r\noptional class. If a prompt is currently being shown, the text is inserted  \r\nbefore it. Takes two arguments:  \r\n\r\n  * __string__ *text*: The text to write.  \r\n\r\n  * __string__ *cls*: The class to give the span containing the text. Optional.  \r\n\r\n  * __bool__ *escape*: Whether the text to write should be html escaped.  \r\n    Optional, defaults to true.  \r\n\r\n\r\n  Examples:  \r\n\r\n        jqconsole.Write(output, 'my-output-class')  \r\n        jqconsole.Write(err.message, 'my-error-class')  \r\n\r\n###jqconsole.Append\r\nAppend the given node to the DOM. If a prompt is currently being shown, the\r\ntext is inserted before it. Takes a single argument:\r\n\r\n   * __(string|Element)__ *node*: The DOM Element or html string to append to\r\n     the console just before the prompt.\r\n\r\n   Example:\r\n\r\n        // Add a div with the text 'hello' on a red background using jquery\r\n        jqconsole.Append($('<div>hello</div>').css('background-color', 'red'));\r\n\r\n        // We can also use document.createElement\r\n        node = document.createElement(\"div\");\r\n        content = document.createTextNode(\"hello\");\r\n        node.appendChild(content);\r\n        jqconsole.Append(node);\r\n\r\n\r\n###jqconsole.SetPromptText\r\nSets the text currently in the input prompt. Takes one parameter:  \r\n\r\n  * __string__ *text*: The text to put in the prompt.  \r\n\r\n  Examples:  \r\n\r\n        jqconsole.SetPromptText('ls')  \r\n        jqconsole.SetPromptText('print [i ** 2 for i in range(10)]')  \r\n\r\n\r\n###jqconsole.ClearPromptText \r\nClears all the text currently in the input prompt. Takes one parameter:  \r\n\r\n  * __bool__ *clear_label*: If specified and true, also clears the main prompt  \r\n    label (e.g. \">>>\").  \r\n\r\n\r\n  Example:  \r\n\r\n        jqconsole.ClearPromptText()  \r\n  \r\n\r\n###jqconsole.GetPromptText \r\nReturns the contents of the prompt. Takes one parameter:  \r\n  \r\n  * __bool__ *full*: If specified and true, also includes the prompt labels  \r\n    (e.g. \">>>\").  \r\n\r\n\r\n  Examples:  \r\n\r\n        var currentCommand = jqconsole.GetPromptText()  \r\n        var logEntry = jqconsole.GetPromptText(true)  \r\n  \r\n\r\n###jqconsole.Reset\r\nResets the console to its initial state, cancelling all current and pending  \r\noperations. Takes no parameters.  \r\n  \r\n  Example:  \r\n  \r\n        jqconsole.Reset()  \r\n\r\n\r\n###jqconsole.GetColumn\r\nReturns the 0-based number of the column on which the cursor currently is.  \r\nTakes no parameters.  \r\n  \r\n  Example:  \r\n  \r\n        // Show the current line and column in a status area.  \r\n        $('#status').text(jqconsole.GetLine() + ', ' + jqconsole.GetColumn())  \r\n\r\n\r\n###jqconsole.GetLine\r\nReturns the 0-based number of the line on which the cursor currently is.  \r\nTakes no parameters.  \r\n  \r\n  Example:  \r\n  \r\n        // Show the current line and column in a status area.  \r\n        $('#status').text(jqconsole.GetLine() + ', ' + jqconsole.GetColumn())  \r\n  \r\n###jqconsole.Focus\r\nForces the focus onto the console so events can be captured.  \r\nTakes no parameters.  \r\n  \r\n  Example:  \r\n  \r\n        // Redirect focus to the console whenever the user clicks anywhere.  \r\n        $(window).click(function() {  \r\n          jqconsole.Focus();  \r\n        })  \r\n\r\n\r\n###jqconsole.GetIndentWidth\r\nReturns the number of spaces inserted when indenting. Takes no parameters.    \r\n    \r\n  Example:  \r\n  \r\n        jqconsole.SetIndentWidth(4);  \r\n        console.assert(jqconsole.GetIndentWidth() == 4);  \r\n\r\n  \r\n###jqconsole.UnRegisterMatching\r\nDeletes a certain matching settings set by `jqconsole.RegisterMatching`.  \r\nTakes two paramaters:  \r\n  \r\n  * __char__ *open*: The opening character of a \"block\".  \r\n  * __char__ *close*: The closing character of a \"block\".  \r\n\r\n\r\n  Example:  \r\n  \r\n        jqconsole.UnRegisterMatching('{', '}');  \r\n\r\n  \r\n###jqconsole.Dump\r\nReturns the text content of the console.    \r\n  \r\n###jqconsole.GetState\r\nReturns the current state of the console. Could be one of the following:  \r\n\r\n  * Input: `\"input\"`    \r\n  * Output: `\"output\"`  \r\n  * Prompt: `\"prompt\"`  \r\n\r\n  \r\n  Example:\r\n  \r\n        jqconsole.GetState(); //output\r\n\r\n\r\n###jqconsole.MoveToStart\r\nMoves the cursor to the start of the current line.   \r\nTakes one parameter:  \r\n      \r\n  * __bool__ *all_lines*: If true moves the cursor to the beginning of the first  \r\n  line in the current prompt. Defaults to false.  \r\n  \r\n\r\n  Example:\r\n  \r\n        // Move to line start Ctrl+A.\r\n        jqconsole.RegisterShortcut('A', function() {\r\n          jqconsole.MoveToStart();\r\n          handler();\r\n        });\r\n\r\n\r\n###jqconsole.MoveToEnd\r\nMoves the cursor to the end of the current line.  \r\nTakes one parameter:  \r\n    \r\n  * __bool__ *all_lines*: If true moves the cursor to the end of the first  \r\n  line in the current prompt. Defaults to false.  \r\n\r\n  Example:\r\n        \r\n        // Move to line end Ctrl+E.\r\n        jqconsole.RegisterShortcut('E', function() {\r\n          jqconsole.MoveToEnd();\r\n          handler();\r\n        });\r\n\r\n###jqconsole.Disable\r\nDisables input and focus on the console.\r\n\r\n\r\n###jqconsole.Enable\r\nEnables input and focus on the console.\r\n\r\n\r\n###jqconsole.IsDisabled\r\nReturns true if the console is disabled.\r\n\r\n\r\n###jqconsole.GetHistory\r\nReturns the contents of the history buffer.\r\n\r\n\r\n###jqconsole.SetHistory\r\nSet the history buffer to the given array.\r\n\r\nTakes one parameter:\r\n\r\n  * __array__ *history*: The history buffer to use.\r\n\r\n  Example:\r\n\r\n        jqconsole.SetHistory(['a = 3', 'a + 3']);\r\n\r\n\r\n###jqconsole.ResetHistory\r\nResets the console history.\r\n\r\n\r\n###jqconsole.ResetMatchings\r\nResets the character matching configuration.\r\n\r\n\r\n###jqconsole.ResetShortcuts\r\nResets the shortcut configuration.\r\n\r\n\r\n##Default Key Config  \r\n  \r\nThe console responds to the followind keys and key combinations by default:  \r\n  \r\n* `Delete`: Delete the following character.  \r\n* `Ctrl+Delete`: Delete the following word.  \r\n* `Backspace`: Delete the preceding character.  \r\n* `Ctrl+Backspace`: Delete the preceding word.  \r\n* `Ctrl+Left`: Move one word to the left.  \r\n* `Ctrl+Right`: Move one word to the right.  \r\n* `Home`: Move to the beginning of the current line.  \r\n* `Ctrl+Home`: Move to the beginnig of the first line.  \r\n* `End`: Move to the end of the current line.  \r\n* `Ctrl+End`: Move to the end of the last line.  \r\n* `Shift+Up`, `Ctrl+Up`: Move cursor to the line above the current one.  \r\n* `Shift+Down`, `Ctrl+Down`: Move cursor to the line below the current one.  \r\n* `Tab`: Indent.  \r\n* `Shift+Tab`: Unindent.  \r\n* `Up`: Previous history item.  \r\n* `Down`: Next history item.  \r\n* `Enter`: Finish input/prompt operation. See Input() and Prompt() for details.  \r\n* `Shift+Enter`: New line.  \r\n* `Page Up`: Scroll console one page up.  \r\n* `Page Down`: Scroll console one page down.  \r\n  \r\n##ANSI escape code SGR support\r\n\r\njq-console implements a large subset of the ANSI escape code graphics.  \r\nUsing the `.Write` method you could add style to the console using  \r\nthe following syntax: \r\n\r\n`ASCII 27 (decimal) or 0x1b (hex)`  `[`  `SGR code` `m`\r\n\r\nExample:\r\n\r\n    jqconsole.Write('\\033[31mRed Text');\r\n\r\nNote that the third parameter `escape` must be true which defaults to it.\r\n\r\nYou'll need to include the `ansi.css` file for default effects or create your  \r\nown using the css classes from the table below.\r\n\r\n###SGR\r\n[Reference](http://en.wikipedia.org/wiki/ANSI_escape_code#graphics).\r\n<table>\r\n  <tr>\r\n    <th>Code</th>\r\n    <th>Effect</th>\r\n    <th>Class</th>\r\n  </tr>\r\n  <tr>\r\n    <td>0</td>\r\n    <td>Reset / Normal</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>1</td>\r\n    <td>Bold</td>\r\n    <td>`jqconsole-ansi-bold`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>2</td>\r\n    <td>Faint</td>\r\n    <td>`jqconsole-ansi-lighter`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>3</td>\r\n    <td>Italic</td>\r\n    <td>`jqconsole-ansi-italic`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>4</td>\r\n    <td>Line below text</td>\r\n    <td>`jqconsole-ansi-underline`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>5</td>\r\n    <td>Blink: 1s delay</td>\r\n    <td>`jqconsole-ansi-blink`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>6</td>\r\n    <td>Blink: 0.5s delay</td>\r\n    <td>`jqconsole-ansi-blink-rapid`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>8</td>\r\n    <td>Hide text</td>\r\n    <td>`jqconsole-ansi-hidden`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>9</td>\r\n    <td>Line through text</td>\r\n    <td>`jqconsole-ansi-line-through`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>10</td>\r\n    <td>Remove all fonts</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>11-19</td>\r\n    <td>Add custom font</td>\r\n    <td>`jqconsole-ansi-fonts-{N}` where N is code - 10</td>\r\n  </tr>\r\n  <tr>\r\n    <td>20</td>\r\n    <td>Add Fraktur font (not implemented in ansi.css)</td>\r\n    <td>`jqconsole-ansi-fraktur`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>21</td>\r\n    <td>Remove Bold and Faint effects</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>22</td>\r\n    <td>Same as 21</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>23</td>\r\n    <td>Remove italic and fraktur effects</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>24</td>\r\n    <td>Remove underline effect</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>25</td>\r\n    <td>Remove blinking effect(s).</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>28</td>\r\n    <td>Reveal text</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>29</td>\r\n    <td>Remove line-through effect</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>30-37</td>\r\n    <td>Set foreground color to color from the color table below</td>\r\n    <td>jqconsole-ansi-color-{COLOR} where {COLOR} is the color name</td>\r\n  </tr>\r\n  <tr>\r\n    <td>39</td>\r\n    <td>Restore default foreground color</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>40-47</td>\r\n    <td>Set background color to color from the color table below</td>\r\n    <td>`jqconsole-ansi-background-color-{COLOR}` where {COLOR} is the color name</td>\r\n  </tr>\r\n  <tr>\r\n    <td>49</td>\r\n    <td>Restore default background color</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>51</td>\r\n    <td>Adds a frame around the text</td>\r\n    <td>`jqconsole-ansi-framed`</td>\r\n  </tr>\r\n  <tr>\r\n    <td>53</td>\r\n    <td>Line above text</td>\r\n    <td>jqconsole-ansi-overline</td>\r\n  </tr>\r\n  <tr>\r\n    <td>54</td>\r\n    <td>Remove frame effect</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td>55</td>\r\n    <td>Remove over-line effect</td>\r\n    <td></td>\r\n  </tr>\r\n</table>\r\n\r\n###Colors\r\n[Reference](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors).\r\n<table>\r\n  <tr>\r\n    <th>Code offset</th>\r\n    <th>Color</th>\r\n  </tr>\r\n  <tr>\r\n    <td>0</td>\r\n    <td>Black</td>\r\n  </tr>\r\n  <tr>\r\n    <td>1</td>\r\n    <td>Red</td>\r\n  </tr>\r\n  <tr>\r\n    <td>2</td>\r\n    <td>Green</td>\r\n  </tr>\r\n  <tr>\r\n    <td>3</td>\r\n    <td>Yellow</td>\r\n  </tr>\r\n  <tr>\r\n    <td>4</td>\r\n    <td>Blue</td>\r\n  </tr>\r\n  <tr>\r\n    <td>5</td>\r\n    <td>Magenta</td>\r\n  </tr>\r\n  <tr>\r\n    <td>6</td>\r\n    <td>Cyan</td>\r\n  </tr>\r\n  <tr>\r\n    <td>7</td>\r\n    <td>White</td>\r\n  </tr>\r\n</table>\r\n\r\n##CSS Classes  \r\n  \r\nSeveral CSS classes are provided to help stylize the console:  \r\n  \r\n* `jqconsole`: The main console container.  \r\n* `jqconsole, jqconsole-blurred`: The main console container, when not in focus.  \r\n* `jqconsole-cursor`: The cursor.  \r\n* `jqconsole-header`: The welcome message at the top of the console.  \r\n* `jqconsole-input`: The prompt area during input. May have multiple lines.  \r\n* `jqconsole-old-input`: Previously-entered inputs.  \r\n* `jqconsole-prompt`: The prompt area during prompting. May have multiple lines.  \r\n* `jqconsole-old-prompt`: Previously-entered prompts.  \r\n* `jqconsole-composition`: The div encapsulating the composition of multi-byte  \r\n    characters.\r\n\r\n  \r\nOf course, custom classes may be specified when using `jqconsole.Write()` for  \r\nfurther customization.  \r\n  \r\n  \r\n##Contributors  \r\n  \r\n[Max Shawabkeh](http://max99x.com/)    \r\n[Amjad Masad](http://twitter.com/amjad_masad)  \r\n","name":"JQConsole","tagline":"Feature complete web terminal"}